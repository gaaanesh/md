"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var osReleaseDetector = require("./os-release-detector");
var imageInspector = require("./image-inspector");
var apkAnalyzer = require("./apk-analyzer");
var aptAnalyzer = require("./apt-analyzer");
var rpmAnalyzer = require("./rpm-analyzer");
var binariesAnalyzer = require("./binaries-analyzer");
var debug = require('debug')('snyk');
function analyze(targetImage) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, imageInspection, osRelease, results, installedPackages, binaries, err_1;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        imageInspector.detect(targetImage),
                        osReleaseDetector.detect(targetImage),
                        Promise.all([
                            apkAnalyzer.analyze(targetImage),
                            aptAnalyzer.analyze(targetImage),
                            rpmAnalyzer.analyze(targetImage),
                        ]).catch(function (err) {
                            debug("Error while running analyzer: '" + err + "'");
                            throw new Error('Failed to detect installed OS packages');
                        }),
                    ])];
                case 1:
                    _a = _b.sent(), imageInspection = _a[0], osRelease = _a[1], results = _a[2];
                    installedPackages = getInstalledPackages(results);
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, binariesAnalyzer.analyze(targetImage, installedPackages)];
                case 3:
                    binaries = _b.sent();
                    return [3 /*break*/, 5];
                case 4:
                    err_1 = _b.sent();
                    debug("Error while running binaries analyzer: '" + err_1 + "'");
                    throw new Error('Failed to detect binaries versions');
                case 5: return [2 /*return*/, {
                        imageId: imageInspection.Id,
                        osRelease: osRelease,
                        results: results,
                        binaries: binaries,
                        imageLayers: imageInspection.RootFS && imageInspection.RootFS.Layers,
                    }];
            }
        });
    });
}
exports.analyze = analyze;
function getInstalledPackages(results) {
    var dockerAnalysis = results.find(function (res) {
        return res.Analysis && res.Analysis.length > 0;
    });
    if (!dockerAnalysis) {
        return [];
    }
    return dockerAnalysis.Analysis.map(function (pkg) { return pkg.Name; });
}
//# sourceMappingURL=index.js.map