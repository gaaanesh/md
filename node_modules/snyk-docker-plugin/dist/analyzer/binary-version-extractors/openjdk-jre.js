"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var docker_1 = require("../../docker");
// todo: add common names such as 'java-common'
var packageNames = ['java'];
exports.packageNames = packageNames;
function extract(targetImage) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var binaryVersion, stderr_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, new docker_1.Docker(targetImage).
                            run('java', ['-version'])];
                case 1:
                    binaryVersion = _a.sent();
                    return [2 /*return*/, parseOpenJDKBinary(binaryVersion)];
                case 2:
                    stderr_1 = _a.sent();
                    if (typeof stderr_1 === 'string' && stderr_1.indexOf('not found') >= 0) {
                        return [2 /*return*/, null];
                    }
                    throw new Error(stderr_1);
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.extract = extract;
function parseOpenJDKBinary(fullVersionOutput) {
    /*
    `java -version` output:
    `java version "1.8.0_191"
     Java(TM) SE Runtime Environment (build 1.8.0_191-b12)
     Java HotSpot(TM) 64-Bit Server VM (build 25.191-b12, mixed mode)`
    => extracting `1.8.0_191-b12`
    */
    var jdkVersionLines = fullVersionOutput &&
        fullVersionOutput.trim().split('\n');
    if (!jdkVersionLines || jdkVersionLines.length !== 3) {
        return null;
    }
    var bracketsRE = /\(build (.*)\)$/;
    var buildVersion = jdkVersionLines[1].match(bracketsRE);
    var version = buildVersion && buildVersion[1];
    if (!version) {
        return null;
    }
    return {
        name: 'openjdk-jre',
        version: version,
    };
}
//# sourceMappingURL=openjdk-jre.js.map